// Code generated by protoc-gen-go.
// source: auth/auth.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth/auth.proto

It has these top-level messages:
	Reply
	RegisterRequest
	RegisterReply
	SaltRequest
	SaltReply
	LoginRequest
	LoginReply
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_OK    Status = 0
	Status_ERROR Status = 1
)

var Status_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}
var Status_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Reply struct {
	Status Status `protobuf:"varint,1,opt,name=status,enum=auth.Status" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Reply) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func (m *Reply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RegisterRequest struct {
	Mail     string `protobuf:"bytes,1,opt,name=mail" json:"mail,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterRequest) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

func (m *RegisterRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RegisterReply struct {
	Status Status `protobuf:"varint,1,opt,name=status,enum=auth.Status" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *RegisterReply) Reset()                    { *m = RegisterReply{} }
func (m *RegisterReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()               {}
func (*RegisterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterReply) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func (m *RegisterReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SaltRequest struct {
	Mail string `protobuf:"bytes,1,opt,name=mail" json:"mail,omitempty"`
}

func (m *SaltRequest) Reset()                    { *m = SaltRequest{} }
func (m *SaltRequest) String() string            { return proto.CompactTextString(m) }
func (*SaltRequest) ProtoMessage()               {}
func (*SaltRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SaltRequest) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

type SaltReply struct {
	Status Status `protobuf:"varint,1,opt,name=status,enum=auth.Status" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Salt   string `protobuf:"bytes,3,opt,name=salt" json:"salt,omitempty"`
}

func (m *SaltReply) Reset()                    { *m = SaltReply{} }
func (m *SaltReply) String() string            { return proto.CompactTextString(m) }
func (*SaltReply) ProtoMessage()               {}
func (*SaltReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SaltReply) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func (m *SaltReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *SaltReply) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

type LoginRequest struct {
	Mail     string `protobuf:"bytes,1,opt,name=mail" json:"mail,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoginRequest) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginReply struct {
	Status  Status `protobuf:"varint,1,opt,name=status,enum=auth.Status" json:"status,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Iv      string `protobuf:"bytes,3,opt,name=iv" json:"iv,omitempty"`
	Payload string `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LoginReply) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func (m *LoginReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *LoginReply) GetIv() string {
	if m != nil {
		return m.Iv
	}
	return ""
}

func (m *LoginReply) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterType((*Reply)(nil), "auth.Reply")
	proto.RegisterType((*RegisterRequest)(nil), "auth.RegisterRequest")
	proto.RegisterType((*RegisterReply)(nil), "auth.RegisterReply")
	proto.RegisterType((*SaltRequest)(nil), "auth.SaltRequest")
	proto.RegisterType((*SaltReply)(nil), "auth.SaltReply")
	proto.RegisterType((*LoginRequest)(nil), "auth.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "auth.LoginReply")
	proto.RegisterEnum("auth.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	GetSalt(ctx context.Context, in *SaltRequest, opts ...grpc.CallOption) (*SaltReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := grpc.Invoke(ctx, "/auth.Auth/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetSalt(ctx context.Context, in *SaltRequest, opts ...grpc.CallOption) (*SaltReply, error) {
	out := new(SaltReply)
	err := grpc.Invoke(ctx, "/auth.Auth/GetSalt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/auth.Auth/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	GetSalt(context.Context, *SaltRequest) (*SaltReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetSalt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaltRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetSalt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetSalt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetSalt(ctx, req.(*SaltRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
		{
			MethodName: "GetSalt",
			Handler:    _Auth_GetSalt_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}

func init() { proto.RegisterFile("auth/auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x41, 0x4f, 0xc2, 0x30,
	0x14, 0x66, 0x73, 0x1b, 0xec, 0x89, 0x80, 0x4f, 0x4d, 0x96, 0x79, 0xc1, 0xc6, 0x03, 0xf1, 0x00,
	0x09, 0x5e, 0x3c, 0x99, 0xa0, 0x31, 0x1e, 0x30, 0x21, 0x29, 0x37, 0x3d, 0xd5, 0xd0, 0xc0, 0x92,
	0x6a, 0x67, 0xdb, 0x61, 0xf8, 0x3b, 0xfe, 0x52, 0xb3, 0x76, 0x08, 0x72, 0xf0, 0x20, 0x97, 0xe5,
	0xbd, 0xaf, 0xfd, 0xbe, 0x7d, 0xfd, 0xde, 0x83, 0x36, 0x2b, 0xcc, 0x62, 0x50, 0x7e, 0xfa, 0xb9,
	0x92, 0x46, 0x62, 0x50, 0xd6, 0xe4, 0x1e, 0x42, 0xca, 0x73, 0xb1, 0xc2, 0x4b, 0x88, 0xb4, 0x61,
	0xa6, 0xd0, 0x89, 0xd7, 0xf5, 0x7a, 0xad, 0x61, 0xb3, 0x6f, 0xef, 0x4e, 0x2d, 0x46, 0xab, 0x33,
	0x3c, 0x85, 0x90, 0x2b, 0x25, 0x55, 0xe2, 0x77, 0xbd, 0x5e, 0x4c, 0x5d, 0x43, 0x46, 0xd0, 0xa6,
	0x7c, 0x9e, 0x69, 0xc3, 0x15, 0xe5, 0x1f, 0x05, 0xd7, 0x06, 0x11, 0x82, 0x37, 0x96, 0x09, 0x2b,
	0x16, 0x53, 0x5b, 0x63, 0x0a, 0x8d, 0x9c, 0x69, 0xfd, 0x29, 0xd5, 0xac, 0xe2, 0xff, 0xf4, 0x64,
	0x0c, 0x47, 0x1b, 0x89, 0x7d, 0xfd, 0x5c, 0xc0, 0xe1, 0x94, 0x09, 0xf3, 0x87, 0x17, 0xf2, 0x02,
	0xb1, 0xbb, 0xb2, 0xe7, 0xbf, 0x4a, 0x71, 0xcd, 0x84, 0x49, 0x0e, 0x9c, 0x78, 0x59, 0x93, 0x5b,
	0x68, 0x3e, 0xc9, 0x79, 0xf6, 0xfe, 0xdf, 0x30, 0x14, 0x40, 0xc5, 0xdf, 0xd7, 0x5d, 0x0b, 0xfc,
	0x6c, 0x59, 0x79, 0xf3, 0xb3, 0x25, 0x26, 0x50, 0xcf, 0xd9, 0x4a, 0x48, 0x36, 0x4b, 0x02, 0x0b,
	0xae, 0xdb, 0xab, 0x73, 0x88, 0x9c, 0x22, 0x46, 0xe0, 0x4f, 0xc6, 0x9d, 0x1a, 0xc6, 0x10, 0x3e,
	0x50, 0x3a, 0xa1, 0x1d, 0x6f, 0xf8, 0xe5, 0x41, 0x30, 0x2a, 0xcc, 0x02, 0x6f, 0xa0, 0xb1, 0x1e,
	0x13, 0x9e, 0x39, 0x1f, 0x3b, 0x93, 0x4f, 0x4f, 0x76, 0xe1, 0x5c, 0xac, 0x48, 0x0d, 0x07, 0x50,
	0x7f, 0xe4, 0xa6, 0xcc, 0x1c, 0x8f, 0xab, 0x07, 0x6c, 0x46, 0x94, 0xb6, 0xb7, 0xa1, 0x35, 0x21,
	0xb4, 0x21, 0x20, 0xba, 0xb3, 0xed, 0x44, 0xd3, 0xce, 0x2f, 0xcc, 0x12, 0xee, 0xa2, 0x67, 0xbb,
	0xd2, 0xaf, 0x91, 0xdd, 0xef, 0xeb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x9c, 0xf9, 0x75,
	0xf2, 0x02, 0x00, 0x00,
}
